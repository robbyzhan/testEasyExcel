<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  
    http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 导入数据库配置 -->
	<context:property-placeholder
		location="classpath:jdbc.properties" />

	<!-- 使用druid数据库数据库连接池进行数据配置 -->
	<bean name="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="initialSize" value="1" />
		<property name="maxActive" value="20" />
		<property name="minIdle" value="1" />
		<property name="maxWait" value="60000" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1800" />
		<property name="logAbandoned" value="true" />
		<property name="filters" value="mergeStat" />
	</bean>

	<!-- 配置 -->
	<!-- SqlSessionFactory的作用是创建SqlSession， SqlSession就是一个会话，相当于JDBC中的Connection对象。 
		每次应用访问数据库，就要通过SqlSessionFactory创建SqlSession， 所以SqlSessionFactory应该在Mybatis整个生命周期中。每一个数据库只应该对应一个SqlSessionFactory。 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 扫描domain包 使用别名 -->
		<property name="typeAliasesPackage" value="com.xuuuuu.pojo" />
		<!-- 扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations"
			value="classpath:mappers/*Mapper.xml" />
	</bean>

	<!-- MapperScannerConfigurer:自动扫描,将Mapper接口生成代理注入到Spring -->
	<!-- 详细参考文章 https://blog.csdn.net/jokemqc/article/details/79082571 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 给出需要扫描Dao接口包 -->
		<property name="basePackage" value="com.xuuuuu.mapper" />
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory" />
	</bean>


	<!-- 配置事物 -->
	<!-- 介绍事物管理：https://www.jianshu.com/p/bc6396926ed7 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置事物管理 -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />

</beans>
